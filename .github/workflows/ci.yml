name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gingerlyai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json

    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci

    - name: Create backend environment file
      working-directory: ./backend
      run: |
        echo "NODE_ENV=test" > .env
        echo "DB_HOST=localhost" >> .env
        echo "DB_PORT=5432" >> .env
        echo "DB_NAME=gingerlyai_test" >> .env
        echo "DB_USER=postgres" >> .env
        echo "DB_PASSWORD=postgres" >> .env
        echo "JWT_SECRET=test-secret" >> .env
        echo "JWT_REFRESH_SECRET=test-refresh-secret" >> .env

    - name: Run backend tests
      working-directory: ./backend
      run: npm test

    - name: Run backend linting
      working-directory: ./backend
      run: npm run lint || true

  # Frontend Tests
  frontend-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: mobile/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./mobile
      run: npm ci

    - name: Run frontend tests
      working-directory: ./mobile
      run: npm test -- --coverage --watchAll=false

    - name: Run frontend linting
      working-directory: ./mobile
      run: npm run lint || true

    - name: Build frontend
      working-directory: ./mobile
      run: npm run build

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        directory: ./mobile/coverage

  # ML Pipeline Tests
  ml-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('ml-training/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install Python dependencies
      working-directory: ./ml-training
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Run ML pipeline tests
      working-directory: ./ml-training
      run: |
        python -m pytest tests/ --cov=. --cov-report=xml || true

    - name: Validate Python code style
      working-directory: ./ml-training
      run: |
        pip install flake8
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || true

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install dependencies
      run: |
        cd backend && npm ci
        cd ../mobile && npm ci

    - name: Run ESLint on backend
      working-directory: ./backend
      run: npx eslint . --ext .js --format json --output-file eslint-report.json || true

    - name: Run ESLint on frontend
      working-directory: ./mobile
      run: npx eslint . --ext .js,.jsx --format json --output-file eslint-report.json || true

  # Build and Deploy (only on main branch)
  build-deploy:
    if: github.ref == 'refs/heads/main'
    needs: [backend-test, frontend-test, ml-test, security-scan]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build backend
      working-directory: ./backend
      run: |
        npm ci
        # Add build steps if needed

    - name: Build frontend
      working-directory: ./mobile
      run: |
        npm ci
        npm run build

    - name: Create deployment artifact
      run: |
        tar -czf gingerlyai-${{ github.sha }}.tar.gz \
          --exclude-from=.gitignore \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='*.log' \
          .

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: gingerlyai-build
        path: gingerlyai-${{ github.sha }}.tar.gz
        retention-days: 30

  # Notification
  notify:
    if: always()
    needs: [backend-test, frontend-test, ml-test, security-scan]
    runs-on: ubuntu-latest

    steps:
    - name: Notify on success
      if: ${{ needs.backend-test.result == 'success' && needs.frontend-test.result == 'success' }}
      run: echo "✅ All tests passed!"

    - name: Notify on failure
      if: ${{ needs.backend-test.result == 'failure' || needs.frontend-test.result == 'failure' }}
      run: echo "❌ Some tests failed!"
